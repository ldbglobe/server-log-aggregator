<!DOCTYPE html>
<html>
<head>
    <title>Log Viewer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 0; background: #f5f5f5; }
        header { position: fixed; top: 0; left: 0; right: 0; z-index: 1000; background: #ffffff; border-bottom: 1px solid #e2e8f0; box-shadow: 0 2px 4px rgba(0,0,0,0.05); padding: 1em 2em; }
        main { margin-top: 220px; padding: 0 2em 2em; }
        .header-container { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5em; }
        .breadcrumb { display: flex; align-items: center; gap: 0.5em; background: #f7fafc; padding: 0.75em 1em; border-radius: 6px; border: 1px solid #e2e8f0; }
        .breadcrumb i { margin-right: 0.5em; }
        .breadcrumb a { color: #2c5282; text-decoration: none; font-weight: 500; }
        .breadcrumb a:hover { text-decoration: underline; }
        .breadcrumb .separator { color: #a0aec0; font-size: 0.9em; }
        .breadcrumb .current { color: #4a5568; font-weight: 500; }
        .log-container { background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.07); padding: 1.5em; margin-bottom: 2em; }
        .log-header { font-weight: bold; color: #2c5282; margin-bottom: 0.5em; display: flex; align-items: center; gap: 1em; }
        .log-line { display: flex; align-items: flex-start; }
        .log-content { flex:1; font-family: monospace; font-size: 1em; background: #f7fafc; border-radius: 4px; padding: 0.5em 1em; overflow-x: auto; white-space: pre-wrap; margin:0; }
        .sensitive { background: #fffbe6; color: #b59a00; padding: 0.2em 0.4em; border-radius: 3px; font-weight: bold; }
        .server-label { font-weight: bold; padding: 0.2em 0.7em; border-radius: 4px; color: #fff; display: inline-block; }
        .line-number { color: #718096; font-size: 0.95em; font-family: monospace; background: #edf2f7; padding: 0.2em 0.5em; border-radius: 3px; margin-right: 0.5em; }
        .timestamp { color: #718096; font-size: 0.95em; }
        .server-legend { display: flex; gap: 1em; margin-bottom: 1em; padding: 0.5em; background: #f8fafc; border-radius: 4px; }
        .server-legend-item { display: flex; align-items: center; gap: 0.5em; }
        .highlight { background-color: #fefcbf; border-radius: 2px; padding:2px 0px; }
        .search-container { display: flex; gap: 0.5em; margin-bottom: 1em; align-items: center; }
        .search-input { flex: 1; padding: 0.5em; border: 1px solid #e2e8f0; border-radius: 4px; font-family: monospace; font-size: 0.9em; }
        .search-input:focus { outline: none; border-color: #4299e1; box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1); }
        .search-info { color: #718096; font-size: 0.9em; white-space: nowrap; }
        .search-count { background: #edf2f7; padding: 0.2em 0.5em; border-radius: 3px; font-family: monospace; }
        .toggle-json-btn {
            background: #3182ce;
            color: #fff;
            border: none;
            border-radius: 4px;
            padding: 0.3em 1em;
            font-size: 0.95em;
            font-family: inherit;
            cursor: pointer;
            transition: background 0.2s, color 0.2s;
            margin-left: auto;
            margin-top: 2px;
        }
        .toggle-json-btn:hover, .toggle-json-btn:focus {
            background: #2b6cb0;
            color: #e2e8f0;
        }
        .log-header span:last-child { margin-left: 0.5em; }
        .server-filter-btn {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            padding: 0.3em 0.7em;
            display: flex;
            align-items: center;
            gap: 0.5em;
            cursor: pointer;
            transition: background 0.2s;
        }
        .server-filter-btn:hover {
            background: #e2e8f0;
        }
        .server-color {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 2px;
        }
        .log-container[data-filter-server="false"],
        .log-container[data-filter-text="false"] {
            display: none !important;
        }
        .log-container.grayed-out {
            opacity: 0.3;
            pointer-events: none;
        }
        .filter-mode-toggle {
            display: flex;
            align-items: center;
            gap: 0.5em;
            margin-left: 1em;
            padding: 0.3em 0.7em;
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
            font-size: 0.9em;
        }
        .filter-mode-toggle:hover {
            background: #e2e8f0;
        }
        .filter-mode-toggle.active {
            background: #bee3f8;
            border-color: #3182ce;
        }
        .server-filter-btn.active {
            background: #bee3f8;
            border-color: #3182ce;
        }
        .api-link { display: inline-flex; align-items: center; gap: 0.5em; background: #2c5282; color: white; text-decoration: none; padding: 0.5em 1em; border-radius: 4px; font-weight: 500; transition: background-color 0.2s; }
        .api-link:hover { background: #2b6cb0; }
        .api-link i { font-size: 0.9em; }
        .scroll-to-top { position: fixed; bottom: 20px; right: 20px; background: #3182ce; color: white; border: none; border-radius: 50%; width: 50px; height: 50px; display: flex; align-items: center; justify-content: center; cursor: pointer; font-size: 1.2em; box-shadow: 0 2px 10px rgba(0,0,0,0.2); transition: all 0.3s ease; z-index: 1001; opacity: 0; visibility: hidden; }
        .scroll-to-top.visible { opacity: 1; visibility: visible; }
        .scroll-to-top:hover { background: #2b6cb0; transform: translateY(-2px); }
        .scroll-progress { position: fixed; top: 0; left: 0; width: 0%; height: 3px; background: linear-gradient(90deg, #3182ce, #63b3ed); z-index: 1002; transition: width 0.1s ease; }
        .minimap { position: fixed; right: 40px; top: 20%; width: 80px; max-height: 80vh; background: rgba(255, 255, 255, 0.9); border: 1px solid #e2e8f0; border-radius: 6px; z-index: 1003; padding: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .minimap-header { font-size: 0.75em; color: #718096; margin-bottom: 8px; text-align: center; }
        .minimap-content { height: 100%; overflow: hidden; position: relative; }
        .minimap-toggle { position: fixed; right: 10px; top: 20%; background: #3182ce; color: white; border: none; border-radius: 4px; padding: 0.5em; cursor: pointer; z-index: 1004; font-size: 0.8em; transition: all 0.3s ease; }
        .minimap-toggle:hover { background: #2b6cb0; }
        .minimap.hidden { display: none; }
    </style>
</head>
<body>
    <div class="scroll-progress"></div>
    <header>
        <div class="header-container">
            <div class="breadcrumb">
                <a href="/" class="server-key"><i class="fas fa-server"></i></a> /
                <a href="{{rootUrl}}"><i class="fas fa-home"></i>{{serverKey}}</a>
                {{#breadcrumbs}}
                    <span class="separator">/</span>
                    {{#isLast}}
                        <span class="current">{{name}}</span>
                    {{/isLast}}
                    {{^isLast}}
                        <a href="{{url}}">{{name}}</a>
                    {{/isLast}}
                {{/breadcrumbs}}
            </div>
            <a href="{{apiUrl}}" class="api-link">
                <i class="fas fa-code"></i>JSON
            </a>
        </div>
        <div class="server-legend">
            {{#serverInfos}}
                <button class="server-legend-item server-filter-btn" 
                    style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 4px; padding: 0.3em 0.7em; display: flex; align-items: center; gap: 0.5em; cursor: pointer; transition: background 0.2s;"
                    data-server-id="{{id}}">
                    <span class="server-color" style="background: {{color}}"></span>
                    <span>{{label}}</span>
                    <span style="color:#888; font-size:0.95em;">({{lineCount}} lignes)</span>
                    <span class="filter-state" style="margin-left:0.5em; color:#3182ce; font-size:0.95em; display:none;">Filtre actif</span>
                </button>
            {{/serverInfos}}
        </div>
        <div class="search-container">
            <input type="text" id="logSearch" class="search-input" placeholder="Search logs (regex supported)..." title="Use regular expressions for search" autocomplete="off">
            <span class="search-info"><span id="matchCount">0</span> matches</span>
            <button class="filter-mode-toggle" onclick="toggleFilterMode()" title="Toggle between hiding and graying out filtered entries">
                <i class="fas fa-eye"></i>
                <span id="filterModeText">grayed</span>
            </button>
        </div>
    </header>
    <main>
        <div id="logs-list">
        {{#logs}}
            <div class="log-container">
                <div class="log-header" style="display: flex; align-items: center;">
                    {{#servers}}
                        <span class="server-label" style="background: {{color}}" data-server-id="{{id}}">{{label}}</span>
                    {{/servers}}
                    <span class="line-number">L{{lineNumber}}</span>
                    <span class="timestamp">{{timestamp}}</span>
                    <span>({{lineCount}} lines)</span>
                    {{#isJson}}
                        <button class="toggle-json-btn" onclick="toggleJsonView(this)">Show formatted</button>
                    {{/isJson}}
                </div>
                {{#lines}}
                <div class="log-line" data-log-line>
                    <pre class="log-content raw-view" style="display:block;">{{raw}}</pre>
                    {{#isJson}}
                        <pre class="log-content formatted-view" style="display:none;">{{formatted}}</pre>
                    {{/isJson}}
                </div>
                {{/lines}}
                {{#sensitive}}
                    <div class="sensitive">Sensitive data detected!</div>
                {{/sensitive}}
            </div>
        {{/logs}}
        </div>
    </main> 
    <button class="scroll-to-top" onclick="scrollToTop()">
        <i class="fas fa-chevron-up"></i>
    </button>
    <button class="minimap-toggle" onclick="toggleMinimap()" title="Toggle minimap">
        <i class="fas fa-map"></i>
    </button>
    <div class="minimap" id="minimap">
        <div class="minimap-header">Log Map</div>
        <div class="minimap-content" id="minimapContent">
            
        </div>
    </div>
    <script>
        let activeServerFilter = null;
        let activeTextFilter = '';
        let filterMode = 'gray';

        function toggleFilterMode() {
            const toggle = document.querySelector('.filter-mode-toggle');
            const icon = toggle.querySelector('i');
            const text = document.getElementById('filterModeText');
            
            if (filterMode === 'hide') {
                filterMode = 'gray';
                icon.className = 'fas fa-eye';
                text.textContent = 'grayed';
            } else {
                filterMode = 'hide';
                icon.className = 'fas fa-eye-slash';
                text.textContent = 'hidden';
            }
            
            // Re-apply filters with new mode
            applyLogFilters();
        }

        function applyLogFilters() {
            const regex = (() => {
                try {
                    return activeTextFilter ? new RegExp(activeTextFilter, 'i') : null;
                } catch (e) { return null; }
            })();
            let matchCount = 0;
            document.querySelectorAll('.log-container').forEach(container => {
                // Filtre serveur
                let hasServer = true;
                if (activeServerFilter) {
                    hasServer = Array.from(container.querySelectorAll('.server-label')).some(lbl => lbl.getAttribute('data-server-id') === activeServerFilter);
                }
                
                // Filtre texte
                let hasText = false;
                if (regex) {
                    const lines = container.querySelectorAll('[data-log-line] .log-content');
                    for (const pre of lines) {
                        const text = pre.textContent;
                        if (regex.test(text)) {
                            hasText = true;
                            pre.innerHTML = text.replace(regex, match => '<span class="highlight">' + match + '</span>');
                        } else {
                            pre.innerHTML = text;
                        }
                    }
                } else if (!activeTextFilter) {
                    hasText = true;
                    container.querySelectorAll('[data-log-line] .log-content').forEach(pre => {
                        pre.innerHTML = pre.textContent;
                    });
                }
                
                const shouldShow = hasServer && hasText;
                
                // Apply filter based on mode
                if (filterMode === 'hide') {
                    container.setAttribute('data-filter-server', hasServer ? 'true' : 'false');
                    container.setAttribute('data-filter-text', hasText ? 'true' : 'false');
                    container.classList.remove('grayed-out');
                } else {
                    // Gray mode - show all but gray out filtered
                    container.setAttribute('data-filter-server', 'true');
                    container.setAttribute('data-filter-text', 'true');
                    if (shouldShow) {
                        container.classList.remove('grayed-out');
                    } else {
                        container.classList.add('grayed-out');
                    }
                }
                
                if (shouldShow) matchCount++;
            });
            document.getElementById('matchCount').textContent = matchCount;
            updateMinimap();
        }

        // Init boutons serveur
        document.querySelectorAll('.server-filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const serverId = this.getAttribute('data-server-id');
                if (activeServerFilter === serverId) {
                    activeServerFilter = null;
                    this.classList.remove('active');
                } else {
                    activeServerFilter = serverId;
                    document.querySelectorAll('.server-filter-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                }
                applyLogFilters();
            });
        });

        function updateServerFilterState() {
            document.querySelectorAll('.server-filter-btn').forEach(btn => {
                const state = btn.querySelector('.filter-state');
                if (btn.classList.contains('active')) {
                    state.style.display = '';
                } else {
                    state.style.display = 'none';
                }
            });
        }
        // Ajout à la fin de chaque click serveur
        document.querySelectorAll('.server-filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                // ...existing code...
                updateServerFilterState();
            });
        });
        // Initial update on load
        updateServerFilterState();

        // Init filtre texte
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        window.addEventListener('load', function() {
            const searchInput = document.getElementById('logSearch');
            // Restaure le filtre depuis localStorage
            const savedFilter = localStorage.getItem('logSearchFilter');
            if (savedFilter) {
                searchInput.value = savedFilter;
                activeTextFilter = savedFilter;
            }
            searchInput.addEventListener('input', debounce(function() {
                activeTextFilter = searchInput.value;
                localStorage.setItem('logSearchFilter', activeTextFilter);
                applyLogFilters();
            }, 200));
            applyLogFilters();
            updateMinimap();
        });
        function toggleJsonView(btn) {
            // Find the .log-line block that follows the header
            const logLine = btn.closest('.log-header').nextElementSibling;
            if (!logLine) return;
            const raw = logLine.querySelector('.raw-view');
            const formatted = logLine.querySelector('.formatted-view');
            if (raw && formatted) {
                if (raw.style.display !== 'none') {
                    raw.style.display = 'none';
                    formatted.style.display = 'block';
                    btn.textContent = 'Show raw';
                } else {
                    raw.style.display = 'block';
                    formatted.style.display = 'none';
                    btn.textContent = 'Show formatted';
                }
            }
        }
        
        // Minimap functionality
        function toggleMinimap() {
            const minimap = document.getElementById('minimap');
            const toggle = document.querySelector('.minimap-toggle');
            
            if (minimap.classList.contains('hidden')) {
                minimap.classList.remove('hidden');
                toggle.innerHTML = '<i class="fas fa-map"></i>';
                updateMinimap();
            } else {
                minimap.classList.add('hidden');
                toggle.innerHTML = '<i class="fas fa-map-marked"></i>';
            }
        }
        
        function updateMinimap() {
            const minimap = document.getElementById('minimap');

            const lines = [];
            let prev = null;
            document.querySelectorAll('#logs-list .log-container').forEach(container => {
                const color = container.querySelector('.server-label') ? container.querySelector('.server-label').style.backgroundColor : '#ccc';
                const filtered = container.classList.contains('grayed-out');
                const height = container.offsetHeight;
                const top = container.offsetTop;

                if (
                    prev &&
                    prev.color === color &&
                    prev.filtered === filtered
                ) {
                    // Merge with previous
                    prev.height = (top - prev.top) + height;
                } else {
                    // Start new segment
                    prev = {
                        height,
                        top: (prev ? prev.top+prev.height : top),
                        filtered,
                        color
                    };
                    lines.push(prev);
                }
            });

            //console.log(lines);

            const minimapContent = document.getElementById('minimapContent');
            minimapContent.innerHTML = '';
            const canvas = document.createElement('canvas');
            canvas.width = 200;
            canvas.height = 1000;
            canvas.style.width = '100%';
            canvas.style.height = '100%';
            const ctx = canvas.getContext('2d');
            lines.forEach((line, index) => {
                if(line.filtered && filterMode === 'hide') {
                    return; // Skip filtered lines in hide mode
                }
                ctx.globalAlpha = line.filtered ? 0.1 : 1.0;
                ctx.fillStyle = line.color;
                const y = (line.top / document.documentElement.scrollHeight) * canvas.height;
                const height = (line.height / document.documentElement.scrollHeight) * canvas.height;
                ctx.fillRect(0, y, canvas.width, height);
            });

            minimapContent.appendChild(canvas);

            canvas.addEventListener('click', function(e) {
                const rect = canvas.getBoundingClientRect();
                const y = e.clientY - rect.top;
                const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
                const targetScroll = (y / rect.height) * scrollHeight;
                window.scrollTo({
                    top: targetScroll,
                    behavior: 'smooth'
                });
            });

            updateMinimapViewport();
        }

        function updateMinimapViewport() {
            const minimapContent = document.getElementById('minimapContent');
            const baseCanvas = minimapContent.querySelector('canvas');
            if (!baseCanvas) return;

            // Remove existing viewport overlay if any
            let overlay = minimapContent.querySelector('.minimap-viewport-overlay');
            if (!overlay) {
                overlay = document.createElement('canvas');
                overlay.className = 'minimap-viewport-overlay';
                overlay.style.position = 'absolute';
                overlay.style.left = '0';
                overlay.style.top = '0';
                overlay.style.pointerEvents = 'none';
                overlay.style.width = '100%';
                overlay.style.height = '100%';
                overlay.style.zIndex = '2';
                minimapContent.appendChild(overlay);
            }

            // Match overlay size to base canvas
            overlay.width = baseCanvas.width;
            overlay.height = baseCanvas.height;

            const ctx = overlay.getContext('2d');
            ctx.clearRect(0, 0, overlay.width, overlay.height);

            const scrollHeight = document.documentElement.scrollHeight;
            const clientHeight = document.documentElement.clientHeight;
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

            const y = (scrollTop / scrollHeight) * overlay.height;
            const h = (clientHeight / scrollHeight) * overlay.height;

            ctx.strokeStyle = '#FA4D66';
            ctx.lineWidth = 2;
            ctx.globalAlpha = 0.7;
            ctx.strokeRect(1, y, overlay.width - 2, h);
            ctx.globalAlpha = 0.15;
            ctx.fillStyle = '#FA4D66';
            ctx.fillRect(1, y, overlay.width - 2, h);
        }
        
        
        // Scroll tracking and progress bar
        function updateScrollProgress() {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
            const scrollProgress = (scrollTop / scrollHeight) * 100;
            
            document.querySelector('.scroll-progress').style.width = scrollProgress + '%';
            
            // Show/hide scroll to top button
            const scrollToTopBtn = document.querySelector('.scroll-to-top');
            if (scrollTop > 300) {
                scrollToTopBtn.classList.add('visible');
            } else {
                scrollToTopBtn.classList.remove('visible');
            }
            
            // Update minimap viewport
            updateMinimapViewport();
        }
        
        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }
        
        // Initialize scroll tracking
        window.addEventListener('scroll', updateScrollProgress);
        window.addEventListener('resize', updateScrollProgress);
        
        // Update on load
        window.addEventListener('load', updateScrollProgress);
    </script>
</body>
</html>
